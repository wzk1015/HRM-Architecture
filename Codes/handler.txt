.addr data_base 0x100
.addr addr_inbox 0x282
.addr addr_outbox 0x284
.addr kernel_text_base 0x4000
.addr pow_2_15 0x248
.addr pow_2_14 0x246
.addr pow_2_13 0x244
.addr pow_2_12 0x242
.addr pow_2_11 0x240
.addr zero 0x200
.addr one 0x202
.addr two 0x204
.addr three 0x206
.addr four 0x208
.addr five 0x210
.addr six 0x212
.addr seven 0x214
.addr empty_value 0x280

.data
	reg_field:		.space 2 
	exception_counter:	.space 2
	exccode:		.space 2
	wrong_addr:	.space 2

.macro branch_exccode(%number, %label)
	copyfrom exccode
	sub %number
	jumpz %label
.end_macro

.text
	copyto reg_field 		# save register
	bumpup exception_counter	# update counter
	copyto exception_counter

	mfcause			#read exccode
	sub pow_2_15
	#sub pow_2_14		#remove exl. crash is already zero
	copyto exccode

	branch_exccode(one, overflow)	#branch based on exccode
	branch_exccode(two, empty_mem)
	branch_exccode(three, empty_reg)
	branch_exccode(four, unrec_instr)
	branch_exccode(five, permission_denied)
	branch_exccode(six, inbox_trap)
	branch_exccode(seven, outbox_trap)
	jump end				#unknown exception

crash:
	mfcause		#crash
	add pow_2_14
	mtcause
	jump end

overflow:
permission_denied:
	mfepc		#skip wrong instruction by adding 2 to EPC
	add two
	mtepc
	jump end

empty_mem:
	copyfrom zero	#load 0 to reg
	copyto reg_field
	jump end
	
empty_reg:
	copyfrom zero	#load 0 to reg
	copyto reg_field
	jump end

unrec_instr:
	jump end		#epc has been set to addr(jump/eret)+2 by hardware, so just jump

inbox_trap:
	copyfrom [addr_inbox]
	sub empty_value
	jumpz inbox_empty	#judge if inbox_addr is empty
	copyfrom [addr_inbox]
	jump end
	
inbox_empty:
	jump crash

outbox_trap:
	copyfrom reg_field
	sub empty_value
	jumpz crash	#if reg is empty, carsh
	copyfrom reg_field
	copyto [addr_outbox]
	jump end

end:
	copyfrom zero	#reset cause
	mtcause
	copyfrom reg_field	#recover register
	eret		#return